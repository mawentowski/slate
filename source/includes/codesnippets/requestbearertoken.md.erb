```shell
curl --location --request POST 'https://your_domain/oauth/token' \
--header 'content_type: application/x-www-form-urlencoded' \
--header 'resource_ID: {{resource_ID}}' \
--header 'client_ID: {{client_ID}}' \
--header 'client_secret: {{client_secret}}' \
--data-raw ''
```

```javascript
var myHeaders = new Headers();
myHeaders.append("content_type", "application/x-www-form-urlencoded");
myHeaders.append("client_ID", "{{client_ID}}");
myHeaders.append("resource_ID", "{{resource_ID}}");
myHeaders.append("client_secret", "{{client_secret}}");

var raw = "";

var requestOptions = {
  method: 'POST',
  headers: myHeaders,
  body: raw,
  redirect: 'follow'
};

fetch("https://your_domain/oauth/token", requestOptions)
  .then(response => response.text())
  .then(result => console.log(result))
  .catch(error => console.log('error', error));
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
MediaType mediaType = MediaType.parse("application/x-www-form-urlencoded");
RequestBody body = RequestBody.create(mediaType, "");
Request request = new Request.Builder()
  .url("https://your_domain/oauth/token")
  .method("POST", body)
  .addHeader("content_type", "application/x-www-form-urlencoded")
  .addHeader("client_ID", "{{client_ID}}")
  .addHeader("resource_ID", "{{resource_ID}}")
  .addHeader("client_secret", "{{client_secret}}")
  .build();
Response response = client.newCall(request).execute();
```

```swift
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

var semaphore = DispatchSemaphore (value: 0)

var request = URLRequest(url: URL(string: "https://your_domain/oauth/token")!,timeoutInterval: Double.infinity)
request.addValue("application/x-www-form-urlencoded", forHTTPHeaderField: "content_type")
request.addValue("{{resource_ID}}", forHTTPHeaderField: "resource_ID")
request.addValue("{{client_ID}}", forHTTPHeaderField: "client_ID")
request.addValue("{{client_secret}}", forHTTPHeaderField: "client_secret")

request.httpMethod = "POST"

let task = URLSession.shared.dataTask(with: request) { data, response, error in 
  guard let data = data else {
    print(String(describing: error))
    semaphore.signal()
    return
  }
  print(String(data: data, encoding: .utf8)!)
  semaphore.signal()
}

task.resume()
semaphore.wait()

```

> The above command returns JSON structured like this:

```json
{
  "token_type": "Bearer",
  "expires_in": "4200",
  
  "access_token": "{{bearer_token}}",
}
```
