```shell
curl --location -g --request POST 'https://sita-{{Env}}-{{AzRegion}}-app-deviceservice.azurewebsites.net/api/v1/location/subscribe' \
--header 'Content-Type: application/json' \
--header 'Authorization: {{BearerToken}}' \
--data-raw '{
	"SessionToken" : "{{SessionToken}}"
}'
```

```javascript
var myHeaders = new Headers();
myHeaders.append("Content-Type", "application/json");
myHeaders.append("Authorization", "{{BearerToken}}");

var raw = JSON.stringify({"SessionToken":"{{SessionToken}}"});

var requestOptions = {
  method: 'POST',
  headers: myHeaders,
  body: raw,
  redirect: 'follow'
};

fetch("https://sita-{{Env}}-{{AzRegion}}-app-deviceservice.azurewebsites.net/api/v1/location/subscribe", requestOptions)
  .then(response => response.text())
  .then(result => console.log(result))
  .catch(error => console.log('error', error));
```

```java
OkHttpClient client = new OkHttpClient().newBuilder()
  .build();
MediaType mediaType = MediaType.parse("application/json");
RequestBody body = RequestBody.create(mediaType, "{\n\t\"SessionToken\" : \"{{SessionToken}}\"\n}");
Request request = new Request.Builder()
  .url("https://sita-{{Env}}-{{AzRegion}}-app-deviceservice.azurewebsites.net/api/v1/location/subscribe")
  .method("POST", body)
  .addHeader("Content-Type", "application/json")
  .addHeader("Authorization", "{{BearerToken}}")
  .build();
Response response = client.newCall(request).execute();
```

```swift
import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

var semaphore = DispatchSemaphore (value: 0)

let parameters = "{\n\t\"SessionToken\" : \"{{SessionToken}}\"\n}"
let postData = parameters.data(using: .utf8)

var request = URLRequest(url: URL(string: "https://sita-{{Env}}-{{AzRegion}}-app-deviceservice.azurewebsites.net/api/v1/location/subscribe")!,timeoutInterval: Double.infinity)
request.addValue("application/json", forHTTPHeaderField: "Content-Type")
request.addValue("{{BearerToken}}", forHTTPHeaderField: "Authorization")

request.httpMethod = "POST"
request.httpBody = postData

let task = URLSession.shared.dataTask(with: request) { data, response, error in 
  guard let data = data else {
    print(String(describing: error))
    semaphore.signal()
    return
  }
  print(String(data: data, encoding: .utf8)!)
  semaphore.signal()
}

task.resume()
semaphore.wait()

```


> Request Body (JSON):

```json
{
  "SessionToken": "w551UBuls9RmFbtISz6uw551UBuls9RmFbtISz6u", 
  "Webhook": "http://<applicationDomain>/FlexCallback",
  "WebhookSecurityToken": "<security token>"
}
```

> The above command returns JSON structured like this:

```json
{
  "locationCapabilityList": [
    {
      "status": "NotReachable",
      "isEnabled": false,
      "hasEnabled": false,
      "lastUpdated": "2019-07-05T13:16:04.1515931Z",
      "locator": "BOH-TEST-KIOSK-002.LSR1",
      "logicalType": "Scanner",
      "capabilities": [
        "ReadBarcode"
      ],
      "additionalSettings": []
    },
    {
      "status": "NotReachable",
      "isEnabled": false,
      "hasEnabled": false,
      "lastUpdated": "2019-07-05T13:16:04.1515931Z",
      "detailedDeviceStatus": {
        "mediaStatus": "Unknown",
        "binStatus": "Unknown",
        "lineStatus": "Unknown"
      },
      "locator": "BOH-TEST-KIOSK-002.BTP1",
      "logicalType": "DocumentPrinter",
      "capabilities": [
        "PrintBagTag"
      ],
      "additionalSettings": []
    }
  ],
  "serviceBusUri": "sb://LOOKUP EXAMPLE",
  "serviceBusTopic": "LOOKUP EXAMPLE",
  "serviceSubscription": "LOOKUP EXAMPLE",
  "serviceBusSharedAccessToken": "SharedAccessSignatureLOOKUP EXAMPLE",
}
```
